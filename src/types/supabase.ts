// This file will be auto-generated by Supabase CLI after you set up your database.
// For now, we'll define a basic placeholder.
// You should run `npx supabase gen types typescript --project-id <your-project-id> --schema public > src/types/supabase.ts`
// to generate the correct types for your project.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      // Define your tables here as you create them in Supabase
      // Example:
      // profiles: {
      //   Row: {
      //     id: string
      //     updated_at: string | null
      //     username: string | null
      //     avatar_url: string | null
      //     website: string | null
      //   }
      //   Insert: {
      //     id: string
      //     updated_at?: string | null
      //     username?: string | null
      //     avatar_url?: string | null
      //     website?: string | null
      //   }
      //   Update: {
      //     id?: string
      //     updated_at?: string | null
      //     username?: string | null
      //     avatar_url?: string | null
      //     website?: string | null
      //   }
      //   Relationships: [
      //     {
      //       foreignKeyName: "profiles_id_fkey"
      //       columns: ["id"]
      //       referencedRelation: "users"
      //       referencedColumns: ["id"]
      //     }
      //   ]
      // }
      dogs: {
        Row: {
          id: string
          name: string
          breed: string
          age: number
          gender: "Male" | "Female" | "Unknown"
          photos: string[]
          description: string
          health_records_last_checkup: string | null
          health_records_conditions: string[] | null
          health_records_notes: string | null
          feeding_schedule_food_type: string | null
          feeding_schedule_times_per_day: number | null
          feeding_schedule_portion_size: string | null
          feeding_schedule_notes: string | null
          vaccination_records: Json | null // Consider a more specific type if possible
          live_stream_url: string | null
          status: "Available" | "Pending" | "Adopted"
          location: string | null
          personality_traits: string[] | null
          created_at: string
        }
        Insert: {
          id?: string
          name: string
          breed: string
          age: number
          gender: "Male" | "Female" | "Unknown"
          photos: string[]
          description: string
          health_records_last_checkup?: string | null
          health_records_conditions?: string[] | null
          health_records_notes?: string | null
          feeding_schedule_food_type?: string | null
          feeding_schedule_times_per_day?: number | null
          feeding_schedule_portion_size?: string | null
          feeding_schedule_notes?: string | null
          vaccination_records?: Json | null
          live_stream_url?: string | null
          status?: "Available" | "Pending" | "Adopted"
          location?: string | null
          personality_traits?: string[] | null
          created_at?: string
        }
        Update: {
          id?: string
          name?: string
          breed?: string
          age?: number
          gender?: "Male" | "Female" | "Unknown"
          photos?: string[]
          description?: string
          health_records_last_checkup?: string | null
          health_records_conditions?: string[] | null
          health_records_notes?: string | null
          feeding_schedule_food_type?: string | null
          feeding_schedule_times_per_day?: number | null
          feeding_schedule_portion_size?: string | null
          feeding_schedule_notes?: string | null
          vaccination_records?: Json | null
          live_stream_url?: string | null
          status?: "Available" | "Pending" | "Adopted"
          location?: string | null
          personality_traits?: string[] | null
          created_at?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
