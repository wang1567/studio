
// This file should be auto-generated by Supabase CLI,
// but for PawsConnect, we are defining it based on expected app structures
// and a view that combines data from a separate fostering app schema.
// Running `npx supabase gen types typescript --project-id <your-project-id> --schema public > src/types/supabase.ts`
// after creating the tables and view below is recommended.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      // This 'dogs' definition represents the structure of the 'dogs_for_adoption_view'
      // which PawsConnect will query. Direct inserts/updates to this "table" via PawsConnect
      // might not be intended if the source of truth is the fostering app's tables.
      dogs: {
        Row: { // Corresponds to the columns selected by the dogs_for_adoption_view
          id: string // uuid from pets.id
          created_at: string // timestamptz from pets.created_at
          name: string // text from pets.name
          breed: string // text, placeholder or from pets if column exists
          age: number // integer, calculated from pets.birth_date
          gender: Database["public"]["Enums"]["gender_enum"] // gender_enum, placeholder
          photos: string[] // _text (array of text), placeholder or from pets
          description: string // text, placeholder or from pets
          health_records: Json // jsonb, constructed from health_records table
          feeding_schedule: Json // jsonb, constructed from feeding_records table
          vaccination_records: Json // jsonb, constructed from vaccine_records table
          live_stream_url: string | null // text, placeholder
          status: Database["public"]["Enums"]["dog_status_enum"] // dog_status_enum, placeholder
          location: string // text, placeholder or from pets
          personality_traits: string[] // _text (array of text), placeholder or from pets
        }
        Insert: { // Inserts would ideally go to the source `pets` table in the fostering app
          id?: string
          created_at?: string
          name: string
          breed: string
          age: number
          gender: Database["public"]["Enums"]["gender_enum"]
          photos: string[]
          description: string
          health_records: Json
          feeding_schedule: Json
          vaccination_records: Json
          live_stream_url?: string | null
          status?: Database["public"]["Enums"]["dog_status_enum"]
          location: string
          personality_traits: string[]
        }
        Update: { // Updates would ideally go to the source `pets` table in the fostering app
          id?: string
          created_at?: string
          name?: string
          breed?: string
          age?: number
          gender?: Database["public"]["Enums"]["gender_enum"]
          photos?: string[]
          description?: string
          health_records?: Json
          feeding_schedule?: Json
          vaccination_records?: Json
          live_stream_url?: string | null
          status?: Database["public"]["Enums"]["dog_status_enum"]
          location?: string
          personality_traits?: string[]
        }
        Relationships: [] // Relationships are managed by the underlying tables of the view
      }
      user_dog_likes: {
        Row: {
          user_id: string // uuid, FK to auth.users.id
          dog_id: string // uuid, FK to dogs_for_adoption_view.id (which is pets.id)
          liked_at: string // timestamptz, default now()
        }
        Insert: {
          user_id: string
          dog_id: string
          liked_at?: string // timestamptz, default now()
        }
        Update: {
          user_id?: string
          dog_id?: string
          liked_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_dog_likes_dog_id_fkey" // This will point to pets.id via the view
            columns: ["dog_id"]
            referencedRelation: "pets" // Or the view name if FKs to views are directly supported/desired
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_dog_likes_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users" // Supabase specific table for auth users
            referencedColumns: ["id"]
          }
        ]
      }
      profiles: {
        Row: {
          id: string // uuid, primary key, FK to auth.users.id
          updated_at: string | null // timestamptz
          full_name: string | null // text
          avatar_url: string | null // text
          role: Database["public"]["Enums"]["user_role_enum"] // type user_role_enum
        }
        Insert: {
          id: string // uuid
          updated_at?: string | null
          full_name?: string | null
          avatar_url?: string | null
          role: Database["public"]["Enums"]["user_role_enum"]
        }
        Update: {
          id?: string
          updated_at?: string | null
          full_name?: string | null
          avatar_url?: string | null
          role?: Database["public"]["Enums"]["user_role_enum"]
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users" // Supabase specific table for auth users
            referencedColumns: ["id"]
          }
        ]
      }
      // Original fostering app tables for context (PawsConnect reads these via the view)
      // pets: { Row, Insert, Update } (as provided by user)
      // health_records: { Row, Insert, Update } (as provided by user)
      // feeding_records: { Row, Insert, Update } (as provided by user)
      // vaccine_records: { Row, Insert, Update } (as provided by user)
      // food_data: { Row, Insert, Update } (as provided by user)
    }
    Views: {
      dogs_for_adoption_view: { // This defines the structure of the view we will create
         Row: { // Matches 'dogs.Row' above
          id: string
          created_at: string
          name: string
          breed: string
          age: number
          gender: Database["public"]["Enums"]["gender_enum"]
          photos: string[]
          description: string
          health_records: Json
          feeding_schedule: Json
          vaccination_records: Json
          live_stream_url: string | null
          status: Database["public"]["Enums"]["dog_status_enum"]
          location: string
          personality_traits: string[]
        }
        // Inserts/Updates to a view are complex and depend on view definition and rules.
        // For simplicity, PawsConnect will treat this view as read-only for dog details.
      }
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      gender_enum: "Male" | "Female" | "Unknown"
      dog_status_enum: "Available" | "Pending" | "Adopted"
      user_role_enum: "adopter" | "caregiver"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
