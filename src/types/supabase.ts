// This file should be auto-generated by Supabase CLI.
// Running `npx supabase gen types typescript --project-id <your-project-id> --schema public > src/types/supabase.ts`
// will overwrite this file with the types from your database.
// This definition is structured to align with the PawsConnect application's data model.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      dogs: {
        Row: {
          id: string // uuid, primary key
          created_at: string // timestamptz, default now()
          name: string // text, not null
          breed: string // text, not null
          age: number // integer, not null
          gender: Database["public"]["Enums"]["gender_enum"] // type gender_enum, not null
          photos: string[] // _text (array of text), not null
          description: string // text, not null
          health_records: Json // jsonb, not null, stores HealthRecord object from src/types/index.ts
          feeding_schedule: Json // jsonb, not null, stores FeedingSchedule object from src/types/index.ts
          vaccination_records: Json // jsonb, not null, stores VaccinationRecord[] array from src/types/index.ts
          live_stream_url: string | null // text
          status: Database["public"]["Enums"]["dog_status_enum"] // type dog_status_enum, not null, default 'Available'
          location: string // text, not null
          personality_traits: string[] // _text (array of text), not null
          // caregiver_id: string | null // uuid, Optional FK to profiles.id if dogs are managed by specific caregivers
        }
        Insert: {
          id?: string // uuid, default gen_random_uuid()
          created_at?: string // timestamptz, default now()
          name: string
          breed: string
          age: number
          gender: Database["public"]["Enums"]["gender_enum"]
          photos: string[]
          description: string
          health_records: Json
          feeding_schedule: Json
          vaccination_records: Json
          live_stream_url?: string | null
          status?: Database["public"]["Enums"]["dog_status_enum"] // default 'Available'
          location: string
          personality_traits: string[]
          // caregiver_id?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          name?: string
          breed?: string
          age?: number
          gender?: Database["public"]["Enums"]["gender_enum"]
          photos?: string[]
          description?: string
          health_records?: Json
          feeding_schedule?: Json
          vaccination_records?: Json
          live_stream_url?: string | null
          status?: Database["public"]["Enums"]["dog_status_enum"]
          location?: string
          personality_traits?: string[]
          // caregiver_id?: string | null
        }
        Relationships: [
          // {
          //   foreignKeyName: "dogs_caregiver_id_fkey"
          //   columns: ["caregiver_id"]
          //   referencedRelation: "profiles"
          //   referencedColumns: ["id"]
          // }
        ]
      }
      user_dog_likes: {
        Row: {
          user_id: string // uuid, FK to auth.users.id
          dog_id: string // uuid, FK to dogs.id
          liked_at: string // timestamptz, default now()
        }
        Insert: {
          user_id: string
          dog_id: string
          liked_at?: string // timestamptz, default now()
        }
        Update: {
          user_id?: string
          dog_id?: string
          liked_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_dog_likes_dog_id_fkey"
            columns: ["dog_id"]
            referencedRelation: "dogs"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "user_dog_likes_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users" // Supabase specific table for auth users
            referencedColumns: ["id"]
          }
        ]
      }
      profiles: {
        Row: {
          id: string // uuid, primary key, FK to auth.users.id
          updated_at: string | null // timestamptz
          full_name: string | null // text
          avatar_url: string | null // text
          role: Database["public"]["Enums"]["user_role_enum"] // type user_role_enum
        }
        Insert: {
          id: string // uuid
          updated_at?: string | null
          full_name?: string | null
          avatar_url?: string | null
          role: Database["public"]["Enums"]["user_role_enum"]
        }
        Update: {
          id?: string
          updated_at?: string | null
          full_name?: string | null
          avatar_url?: string | null
          role?: Database["public"]["Enums"]["user_role_enum"]
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users" // Supabase specific table for auth users
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      gender_enum: "Male" | "Female" | "Unknown"
      dog_status_enum: "Available" | "Pending" | "Adopted"
      user_role_enum: "adopter" | "caregiver"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
